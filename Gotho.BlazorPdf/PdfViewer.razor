@using Gotho.BlazorPdf.BlazorPdfIcons

@inherits ComponentBase

<div class="blazorpdf-container">
    <div role="toolbar" class="blazorpdf-toolbar" style="background-color: @Colors.Toolbar">
        @*Toggle Thumbnail*@
        
        @if (!HideThumbnails)
        {
            <div class="blazorpdf-toolbar__item blazorpdf__hide-on-mobile">
                <button class="blazorpdf-toolbar__item-button" disabled="@InputDisabled()" @onclick="ToggleThumbnails"
                        aria-label="@LocalizedStrings.ToggleThumbnails">
                    <span>
                        <ThumbnailsIcon Color="@Colors.Icon"/>
                    </span>
                </button>
            </div>
        }

        @*Previous Page*@
        <div class="blazorpdf-toolbar__item">
            <button class="blazorpdf-toolbar__item-button" disabled="@InputDisabled()" @onclick="PreviousPageAsync"
                    aria-label="@LocalizedStrings.PreviousPage">
                <span>
                    <PreviousPageIcon Color="@Colors.Icon"/>
                </span>
            </button>
        </div>

        @*Next Page*@
        <div class="blazorpdf-toolbar__item">
            <button class="blazorpdf-toolbar__item-button" disabled="@InputDisabled()" @onclick="NextPageAsync"
                    aria-label="@LocalizedStrings.NextPage">
                <span>
                    <NextPageIcon Color="@Colors.Icon"/>
                </span>
            </button>
        </div>

        @*Current Page*@
        <div class="blazorpdf-toolbar__item blazorpdf__hide-on-mobile">
            <input type="number" value="@PdfFile.Paging.CurrentPage" disabled="@InputDisabled()"
                   @onchange="PageChanged"/>
        </div>

        @* of *@
        <div class="blazorpdf-toolbar__item blazorpdf__hide-on-mobile">
            <p>@LocalizedStrings.PageOf</p>
        </div>

        @*Page Total*@
        <div class="blazorpdf-toolbar__item blazorpdf__hide-on-mobile">
            <p>@PdfFile.Paging.TotalPages</p>
        </div>

        <div class="blazorpdf-toolbar__spacer blazorpdf__hide-on-mobile"></div>

        @*Zoom Out*@
        <div class="blazorpdf-toolbar__item">
            <button class="blazorpdf-toolbar__item-button" @onclick="ZoomOutAsync" disabled="@InputDisabled()"
                    aria-label="@LocalizedStrings.ZoomOut">
                <span>
                    <ZoomOutIcon Color="@Colors.Icon"/>
                </span>
            </button>
        </div>

        @*Current Zoom*@
        <div class="blazorpdf-toolbar__item blazorpdf__hide-on-mobile">
            <span class="blazorpdf-toolbar__item-chip">@PdfFile.Zooming.GetZoomPercentageString()</span>
        </div>

        @*Zoom In*@
        <div class="blazorpdf-toolbar__item">
            <button class="blazorpdf-toolbar__item-button" @onclick="ZoomInAsync" disabled="@InputDisabled()"
                    aria-label="@LocalizedStrings.ZoomIn">
                <span>
                    <ZoomInIcon Color="@Colors.Icon"/>
                </span>
            </button>
        </div>

        <div class="blazorpdf-toolbar__spacer"></div>

        @*Menu*@
        <div class="blazorpdf-toolbar__item">
            <div class="blazorpdf-toolbar__menu-wrapper">
                <input type="checkbox" id="menu-toggle" hidden>
                <label for="menu-toggle" class="blazorpdf-toolbar__menu-trigger-button">
                    <span>
                        <MenuIcon Color="@Colors.Icon"/>
                    </span>
                </label>
                <div class="blazorpdf-toolbar__menu">
                    <label for="menu-toggle" class="blazorpdf-toolbar__menu-overlay"></label>
                    <div class="blazorpdf-toolbar__menu-content">
                        <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                @onclick="RotateClockwiseAsync">
                            <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                <RotateCWIcon Color="@Colors.Icon"/>
                            </span>
                            <span
                                class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.RotateClockwise</span>
                        </button>
                        <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                @onclick="RotateCounterclockwiseAsync">
                            <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                <RotateCCWIcon Color="@Colors.Icon"/>
                            </span>
                            <span
                                class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.RotateCounterclockwise</span>
                        </button>
                        <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                @onclick="SwitchOrientationAsync">
                            <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                <SwitchOrientationIcon Color="@Colors.Icon"/>
                            </span>
                            <span
                                class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.SwitchOrientation</span>
                        </button>
                        <hr class="blazorpdf-toolbar__menu-divider">
                        <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                @onclick="FirstPageAsync">
                            <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                <FirstPageIcon Color="@Colors.Icon"/>
                            </span>
                            <span class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.FirstPage</span>
                        </button>
                        <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                @onclick="LastPageAsync">
                            <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                <LastPageIcon Color="@Colors.Icon"/>
                            </span>
                            <span class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.LastPage</span>
                        </button>
                        <hr class="blazorpdf-toolbar__menu-divider">
                        <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                @onclick="ResetZoomAsync">
                            <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                <ZoomResetIcon Color="@Colors.Icon"/>
                            </span>
                            <span class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.ResetZoom</span>
                        </button>
                        <hr class="blazorpdf-toolbar__menu-divider">
                        <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                @onclick="PrintDocumentAsync">
                            <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                <PrintIcon Color="@Colors.Icon"/>
                            </span>
                            <span class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.PrintDocument</span>
                        </button>
                        <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                @onclick="DownloadDocumentAsync">
                            <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                <DownloadIcon Color="@Colors.Icon"/>
                            </span>
                            <span
                                class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.DownloadDocument</span>
                        </button>
                        @if (SinglePageMode)
                        {
                            <hr class="blazorpdf-toolbar__menu-divider">
                            <button type="button" class="blazorpdf-toolbar__menu-menu-item" disabled="@InputDisabled()"
                                    @onclick="ToggleDrawingAsync">
                                <span class="blazorpdf-toolbar__menu-menu-item-icon">
                                    <DrawIcon Color="@Colors.Icon"/>
                                </span>
                                <span
                                    class="blazorpdf-toolbar__menu-menu-item-text">@LocalizedStrings.Draw</span>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>

    @if (Loading)
    {
        <div class="blazorpdf__loader-container" style="background-color: @Colors.Toolbar">
            <div class="blazorpdf__loader" style="background-color: @Colors.Loader"></div>
        </div>
    }

    <div class="blazorpdf-pdf" style="background-color: @Colors.Background">

        @if (Error is not null)
        {
            <div class="blazorpdf-pdf__error">
                <div class="blazorpdf-pdf__error-content">
                    @if (Error.ErrorType == PdfErrorType.PasswordRequired)
                    {
                        <h1>@LocalizedStrings.PasswordRequired</h1>
                        <div class="blazorpdf-pdf__input">
                            <input type="text" @bind="PdfPassword" id="pdfPassword" class="blazorpdf-pdf__input-field"
                                   placeholder="Password">
                            <span
                                class="blazorpdf-pdf__input-help">@LocalizedStrings.PasswordHint</span>
                        </div>
                        <button class="blazorpdf-pdf__error-submit" type="button" @onclick="@(() => LoadPdfAsync())">
                            Submit
                        </button>
                    }
                    else
                    {
                        <h1>⛔ PDF Error</h1>
                        <div>
                            <p>@Error.Message</p>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="@(Error is not null ? "blazorpdf-d-none" : "")">
            <div id="@($"{PdfFile.Id}_thumbs")"
                 class="@((!HideThumbnails && _showThumbnails) ? "blazorpdf-pdf__thumbnails" : "blazorpdf-pdf__thumbnails blazorpdf-d-none")"
                 style="background-color: @Colors.Background"></div>
        </div>

        <div>
            @if (PdfFile.DrawLayer.Enabled)
            {
                <div class="blazorpdf-drawing__container">
                    <div class="blazorpdf-drawing__close">
                        <button type="button" @onclick="@ToggleDrawingAsync">
                            <CloseIcon Color="@Colors.Icon"/>
                        </button>
                    </div>
                    <span>@LocalizedStrings.DrawingTools</span>
                    <div class="blazorpdf-drawing__input-group">
                        <label for="@($"{PdfFile.Id}_drawing_color")">@LocalizedStrings.DrawingColor</label>
                        <input id="@($"{PdfFile.Id}_drawing_color")" type="color" @onchange="ColorChanged" value="@PdfFile.DrawLayer.PenColor"/>
                    </div>
                    <div class="blazorpdf-drawing__input-group">
                        <label for="@($"{PdfFile.Id}_drawing_thickness")">@LocalizedStrings.DrawingThickness</label>
                        <input id="@($"{PdfFile.Id}_drawing_thickness")" type="range" min="1" max="40" value="@PdfFile.DrawLayer.PenThickness"
                               @onchange="ThicknessChanged"/>
                    </div>
                    <hr class="blazorpdf-drawing__hr"/>
                    <div class="blazorpdf-drawing__button-group">
                        <button type="button" @onclick="UndoLastStrokeAsync">@LocalizedStrings.DrawingUndo</button>
                        <button type="button" @onclick="ClearAllPageStrokesAsync">@LocalizedStrings.DrawingClear</button>
                    </div>
                </div>
            }
        </div>


        <div class="@(Error is not null ? "blazorpdf-d-none" : "")" style="margin: auto">
            <div style="position: relative; background-color: @Colors.Background; margin: 25px">
                <div>
                    @* PDF Canvas *@
                    @if (SinglePageMode)
                    {
                        <canvas id="@PdfFile.Id"></canvas>
                    }
                    else
                    {
                        <div id="@PdfFile.Id" class="blazorpdf__scroll" style="height: @Height"></div>
                    }
                </div>

                @if (SinglePageMode)
                {
                    <div>
                        @* Drawing Layer *@
                        <canvas id="@($"{PdfFile.Id}_drawing")" class="blazorpdf-drawing__canvas"></canvas>
                    </div>
                    <div>
                        @* Text Layer *@
                        <div id="@($"{PdfFile.Id}_text")" class="textLayer"></div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {

    private bool _showThumbnails = true;

    private bool InputDisabled()
    {
        return Loading || Error is not null;
    }

    private void ToggleThumbnails()
    {
        _showThumbnails = !_showThumbnails;
    }

    private async Task PageChanged(ChangeEventArgs obj)
    {
        if (int.TryParse(obj.Value as string, out var result))
        {
            await PageNumberChanged(result);
        }
    }

    private async Task ColorChanged(ChangeEventArgs obj)
    {
        await UpdatePenColorAsync(obj.Value as string ?? "#FF0000");
    }

    private async Task ThicknessChanged(ChangeEventArgs obj)
    {
        var thickness = 2;
        if (int.TryParse(obj.Value?.ToString(), out var parsedInt))
            thickness = parsedInt;

        await UpdatePenThickness(thickness);
    }
}
